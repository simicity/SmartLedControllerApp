// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: led.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum LedStateType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case off // = 0
  case solid // = 1
  case blink // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .off
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .off
    case 1: self = .solid
    case 2: self = .blink
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .off: return 0
    case .solid: return 1
    case .blink: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [LedStateType] = [
    .off,
    .solid,
    .blink,
  ]

}

enum LedColorType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case ledColorOff // = 0
  case ledColorRed // = 1
  case ledColorGreen // = 2
  case ledColorYellow // = 3
  case ledColorBlue // = 4
  case ledColorMagenta // = 5
  case ledColorCyan // = 6
  case ledColorWhite // = 7
  case UNRECOGNIZED(Int)

  init() {
    self = .ledColorOff
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ledColorOff
    case 1: self = .ledColorRed
    case 2: self = .ledColorGreen
    case 3: self = .ledColorYellow
    case 4: self = .ledColorBlue
    case 5: self = .ledColorMagenta
    case 6: self = .ledColorCyan
    case 7: self = .ledColorWhite
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .ledColorOff: return 0
    case .ledColorRed: return 1
    case .ledColorGreen: return 2
    case .ledColorYellow: return 3
    case .ledColorBlue: return 4
    case .ledColorMagenta: return 5
    case .ledColorCyan: return 6
    case .ledColorWhite: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [LedColorType] = [
    .ledColorOff,
    .ledColorRed,
    .ledColorGreen,
    .ledColorYellow,
    .ledColorBlue,
    .ledColorMagenta,
    .ledColorCyan,
    .ledColorWhite,
  ]

}

struct LedControl: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ledStateType: LedStateType = .off

  var ledColorType: LedColorType = .ledColorOff

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GetLedRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ledID: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GetLedResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ledID: UInt32 = 0

  var ledControl: LedControl {
    get {return _ledControl ?? LedControl()}
    set {_ledControl = newValue}
  }
  /// Returns true if `ledControl` has been explicitly set.
  var hasLedControl: Bool {return self._ledControl != nil}
  /// Clears the value of `ledControl`. Subsequent reads from it will return its default value.
  mutating func clearLedControl() {self._ledControl = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _ledControl: LedControl? = nil
}

struct PutLedRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ledID: UInt32 = 0

  var ledControl: LedControl {
    get {return _ledControl ?? LedControl()}
    set {_ledControl = newValue}
  }
  /// Returns true if `ledControl` has been explicitly set.
  var hasLedControl: Bool {return self._ledControl != nil}
  /// Clears the value of `ledControl`. Subsequent reads from it will return its default value.
  mutating func clearLedControl() {self._ledControl = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _ledControl: LedControl? = nil
}

struct PutLedResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ledID: UInt32 = 0

  var ledControl: LedControl {
    get {return _ledControl ?? LedControl()}
    set {_ledControl = newValue}
  }
  /// Returns true if `ledControl` has been explicitly set.
  var hasLedControl: Bool {return self._ledControl != nil}
  /// Clears the value of `ledControl`. Subsequent reads from it will return its default value.
  mutating func clearLedControl() {self._ledControl = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _ledControl: LedControl? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension LedStateType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LED_STATE_TYPE_OFF"),
    1: .same(proto: "LED_STATE_TYPE_SOLID"),
    2: .same(proto: "LED_STATE_TYPE_BLINK"),
  ]
}

extension LedColorType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LED_COLOR_OFF"),
    1: .same(proto: "LED_COLOR_RED"),
    2: .same(proto: "LED_COLOR_GREEN"),
    3: .same(proto: "LED_COLOR_YELLOW"),
    4: .same(proto: "LED_COLOR_BLUE"),
    5: .same(proto: "LED_COLOR_MAGENTA"),
    6: .same(proto: "LED_COLOR_CYAN"),
    7: .same(proto: "LED_COLOR_WHITE"),
  ]
}

extension LedControl: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "LedControl"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "led_state_type"),
    2: .standard(proto: "led_color_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.ledStateType) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.ledColorType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.ledStateType != .off {
      try visitor.visitSingularEnumField(value: self.ledStateType, fieldNumber: 1)
    }
    if self.ledColorType != .ledColorOff {
      try visitor.visitSingularEnumField(value: self.ledColorType, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: LedControl, rhs: LedControl) -> Bool {
    if lhs.ledStateType != rhs.ledStateType {return false}
    if lhs.ledColorType != rhs.ledColorType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetLedRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetLedRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "led_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.ledID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.ledID != 0 {
      try visitor.visitSingularUInt32Field(value: self.ledID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetLedRequest, rhs: GetLedRequest) -> Bool {
    if lhs.ledID != rhs.ledID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetLedResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetLedResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "led_id"),
    2: .standard(proto: "led_control"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.ledID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._ledControl) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.ledID != 0 {
      try visitor.visitSingularUInt32Field(value: self.ledID, fieldNumber: 1)
    }
    try { if let v = self._ledControl {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetLedResponse, rhs: GetLedResponse) -> Bool {
    if lhs.ledID != rhs.ledID {return false}
    if lhs._ledControl != rhs._ledControl {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PutLedRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PutLedRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "led_id"),
    2: .standard(proto: "led_control"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.ledID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._ledControl) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.ledID != 0 {
      try visitor.visitSingularUInt32Field(value: self.ledID, fieldNumber: 1)
    }
    try { if let v = self._ledControl {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PutLedRequest, rhs: PutLedRequest) -> Bool {
    if lhs.ledID != rhs.ledID {return false}
    if lhs._ledControl != rhs._ledControl {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PutLedResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PutLedResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "led_id"),
    2: .standard(proto: "led_control"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.ledID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._ledControl) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.ledID != 0 {
      try visitor.visitSingularUInt32Field(value: self.ledID, fieldNumber: 1)
    }
    try { if let v = self._ledControl {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PutLedResponse, rhs: PutLedResponse) -> Bool {
    if lhs.ledID != rhs.ledID {return false}
    if lhs._ledControl != rhs._ledControl {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
